/*
 * File: GetViconData.c
 *
 *
  *
  *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
  *
  *   This file is an S-function produced by the S-Function
  *   Builder which only recognizes certain fields.  Changes made
  *   outside these fields will be lost the next time the block is
  *   used to load, edit, and resave this file. This file will be overwritten
  *   by the S-function Builder block. If you want to edit this file by hand, 
  *   you must change it only in the area defined as:  
  *
  *        %%%-SFUNWIZ_defines_Changes_BEGIN
  *        #define NAME 'replacement text' 
  *        %%% SFUNWIZ_defines_Changes_END
  *
  *   DO NOT change NAME--Change the 'replacement text' only.
  *
  *   For better compatibility with the Real-Time Workshop, the
  *   "wrapper" S-function technique is used.  This is discussed
  *   in the Real-Time Workshop User's Manual in the Chapter titled,
  *   "Wrapper S-functions".
  *
  *  -------------------------------------------------------------------------
  * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
  *  ------------------------------------------------------------------------- 
 * Created: Sat Sep  7 20:43:46 2013
 * 
 *
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME GetViconData
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS           0

#define NUM_OUTPUTS          1
/* Output Port  0 */
#define OUT_PORT_0_NAME      obj
#define OUTPUT_0_WIDTH       8
#define OUTPUT_DIMS_0_COL    1
#define OUTPUT_0_DTYPE       real_T
#define OUTPUT_0_COMPLEX     COMPLEX_NO
#define OUT_0_FRAME_BASED    FRAME_NO
#define OUT_0_BUS_BASED      0
#define OUT_0_BUS_NAME       
#define OUT_0_DIMS           1-D
#define OUT_0_ISSIGNED        1
#define OUT_0_WORDLENGTH      8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH  3
#define OUT_0_BIAS            0
#define OUT_0_SLOPE           0.125

#define NPARAMS              1

#define SAMPLE_TIME_0        INHERITED_SAMPLE_TIME
#define NUM_DISC_STATES      0
#define DISC_STATES_IC       [0]
#define NUM_CONT_STATES      0
#define CONT_STATES_IC       [0]

#define SFUNWIZ_GENERATE_TLC 0
#define SOURCEFILES "__SFB__"
#define PANELINDEX           6
#define USE_SIMSTRUCT        0
#define SHOW_COMPILE_STEPS   0                   
#define CREATE_DEBUG_MEXFILE 0
#define SAVE_CODE_ONLY       1
#define SFUNWIZ_REVISION     3.0
/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"
#include "CFetchViconData.h"
extern void GetViconData_Outputs_wrapper(real_T *obj);

/*====================*
 * S-function methods *
 *====================*/
/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */



static void mdlInitializeSizes(SimStruct *S)
{

    DECL_AND_INIT_DIMSINFO(outputDimsInfo);
    ssSetNumSFcnParams(S, NPARAMS);
     if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
	 return; /* Parameter mismatch will be reported by Simulink */
     }

    ssSetNumContStates(S, NUM_CONT_STATES);
    ssSetNumDiscStates(S, NUM_DISC_STATES);

    if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;
    
    if (!ssSetNumOutputPorts(S, 1)) return;
    
    
    
    ssSetOutputPortWidth(S, 0, OUTPUT_0_WIDTH);
    ssSetOutputPortDataType(S, 0, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
        
    ssSetNumSampleTimes(S, 1);
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumPWork(S, 1);
    ssSetNumModes(S, 0);
    ssSetNumNonsampledZCs(S, 0);


    /* Take care when specifying exception free code - see sfuntmpl_doc.c */
    ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |
		     SS_OPTION_WORKS_WITH_CODE_REUSE));


}

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, SAMPLE_TIME_0);
    ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_SET_OUTPUT_PORT_DATA_TYPE
static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType)
{
    ssSetOutputPortDataType(S, 0, dType);
}

#define MDL_START
static void mdlStart(SimStruct *S)
{

    ssGetPWork(S)[0]=(void *)new CFetchViconData();
}

#define MDL_SET_DEFAULT_PORT_DATA_TYPES
static void mdlSetDefaultPortDataTypes(SimStruct *S)
{
   ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

/* Function: mdlOutputs =======================================================
 *
*/
static void mdlOutputs(SimStruct *S, int_T tid)
{
    real_T        *y0  = (real_T *)ssGetOutputPortRealSignal(S,0);
    
    bool res;

    real_T      *fp = mxGetPr(ssGetSFcnParam(S,0));
    int index=(int)*fp;
    CFetchViconData * vicon=(CFetchViconData * )ssGetPWork(S)[0];

    
    if(!(vicon->IsConnected))
    { 
            printf("index:%d",index);
            printf("model:%s,%s\r\n:",vicon->GetModelName(index),vicon->GetSegName(index));
            printf("Connecting to %s",vicon->host);
            res=vicon->Connect(vicon->host);
            if(res==false)
            {
                printf("Failed to connect!\r\n");
                    return;
            }
            else
            {
                printf("Successfully connected!\r\n");
            }

    }
        
        ObjStatus s=vicon->GetStatus(index);
        for(int i=0;i<3;i++)
        {
            y0[i]=s.pos[i];
            y0[i+3]=s.vel[i];
        }
        y0[6]=s.tm;
        if(s.res)
        {
            y0[7]=1;
        }
        else
        {
            y0[7]=0;
        }


    /*
    if(!(vicon.IsConnected))
    {
            if(vicon.segCount<=0)
            {
                vicon.GetModelName();   
            }

            for(int i=0;i<vicon.segCount;i++)
            {
                printf("name:%s,%s\r\n",vicon.model[i],vicon.segment[i]);
            }
             printf("count:%d\r\n",vicon.segCount);
            
            printf("Connecting to 192.168.10.1:801...\r\n");
            res=vicon.Connect("192.168.10.1:801");
            if(res==false)
            {
                printf("Failed to connect!\r\n");
                    return;
            }
            else
            {
                printf("Successfully connected!\r\n");
            }

    }
  

    for(int j=0;j<vicon.segCount;j++)
    {
        ObjStatus s=vicon.GetStatus("Patient","Foot");
        for(int i=0;i<3;i++)
        {
            y0[j*6+i]=s.pos[i];
            y0[j*6+i+3]=s.vel[i];
        }
        y0[5]=1;
    }*/
}



/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
    /* 
    CFetchViconData * vicon=(CFetchViconData * )ssGetPWork(S)[0];
    vicon->Disconnect();
   vicon.Disconnect();*/
}
#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif


